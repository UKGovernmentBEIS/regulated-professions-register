name: Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'release-*'

env:
  CF_USER: ${{ secrets.CF_USER }}
  CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build_and_push_to_dockerhub:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set_output.outputs.docker_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Docker tag environment variable
        run: echo "DOCKER_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Tag and Push Docker Container
        run: script/docker-push
      - name: Set Docker tag as an output
        id: set_output
        run: echo "::set-output name=docker_tag::${{ env.DOCKER_TAG }}"
  deploy_to_production:
    needs: build_and_push_to_dockerhub
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/release')
    env:
      TF_VAR_docker_tag: ${{ needs.build_and_push_to_dockerhub.outputs.docker_tag }}
      TF_VAR_environment: 'prod'
      TF_VAR_app_secret: ${{ secrets.PROD_APP_SECRET }}
      TF_VAR_auth0_client_id: ${{ secrets.PROD_AUTH0_CLIENT_ID }}
      TF_VAR_auth0_client_secret: ${{ secrets.PROD_AUTH0_CLIENT_SECRET }}
      TF_VAR_auth0_domain: ${{ secrets.PROD_AUTH0_DOMAIN }}
      TF_VAR_auth0_redirect_url: ${{ secrets.PROD_AUTH0_REDIRECT_URL }}
      TF_VAR_papertrail_destination: ${{ secrets.PROD_PAPERTRAIL_DESTINATION }}
      TF_VAR_notify_template_id: ${{ secrets.PROD_NOTIFY_TEMPLATE_ID }}
      TF_VAR_notify_api_key: ${{ secrets.PROD_NOTIFY_API_KEY }}
      TF_VAR_rollbar_token: ${{ secrets.PROD_ROLLBAR_TOKEN }}
      TF_VAR_basic_auth_username: ${{ secrets.PROD_BASIC_AUTH_USERNAME }}
      TF_VAR_basic_auth_password: ${{ secrets.PROD_BASIC_AUTH_PASSWORD }}
      TF_VAR_custom_domain: ${{ vars.CUSTOM_DOMAIN }}
      TF_VAR_redirect_domain: ${{ vars.REDIRECT_DOMAIN }}
      TF_VAR_custom_hostname: www
    steps:
      - name: Custom domain
        run: echo "::TF_VAR_custom_domain::$TF_VAR_custom_domain"
      - uses: actions/checkout@v2
      - name: Deploy latest code to Production
        run: script/deploy-terraform
  deploy_to_staging:
    needs: build_and_push_to_dockerhub
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      TF_VAR_docker_tag: ${{ needs.build_and_push_to_dockerhub.outputs.docker_tag }}
      TF_VAR_environment: 'staging'
      TF_VAR_app_secret: ${{ secrets.STAGING_APP_SECRET }}
      TF_VAR_auth0_client_id: ${{ secrets.STAGING_AUTH0_CLIENT_ID }}
      TF_VAR_auth0_client_secret: ${{ secrets.STAGING_AUTH0_CLIENT_SECRET }}
      TF_VAR_auth0_domain: ${{ secrets.STAGING_AUTH0_DOMAIN }}
      TF_VAR_auth0_redirect_url: ${{ secrets.STAGING_AUTH0_REDIRECT_URL }}
      TF_VAR_papertrail_destination: ${{ secrets.STAGING_PAPERTRAIL_DESTINATION }}
      TF_VAR_notify_template_id: ${{ secrets.STAGING_NOTIFY_TEMPLATE_ID }}
      TF_VAR_notify_api_key: ${{ secrets.STAGING_NOTIFY_API_KEY }}
      TF_VAR_rollbar_token: ${{ secrets.STAGING_ROLLBAR_TOKEN }}
      TF_VAR_basic_auth_username: ${{ secrets.STAGING_BASIC_AUTH_USERNAME }}
      TF_VAR_basic_auth_password: ${{ secrets.STAGING_BASIC_AUTH_PASSWORD }}
      TF_VAR_custom_domain: ${{ vars.CUSTOM_DOMAIN }}
      TF_VAR_redirect_domain: ${{ vars.REDIRECT_DOMAIN }}
      TF_VAR_custom_hostname: staging
    steps:
      - name: Custom domain
        run: echo "::TF_VAR_custom_domain::$TF_VAR_custom_domain"
      - uses: actions/checkout@v2
      - name: Deploy latest code to Staging
        run: script/deploy-terraform
  check_and_notify:
    needs: deploy_to_production
    if: startsWith(github.ref, 'refs/tags/release')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Notifying the team of a successful deploy
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          HEALTH_CHECK_URL: https://${{ secrets.PROD_BASIC_AUTH_USERNAME }}:${{ secrets.PROD_BASIC_AUTH_PASSWORD }}@www.regulated-professions.service.gov.uk/health-check
        run: script/deploy-notification
