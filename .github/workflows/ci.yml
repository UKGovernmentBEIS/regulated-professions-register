name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - develop

env:
  HOST_URL: ${{ secrets.HOST_URL }}
  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  APP_SECRET: ${{ secrets.APP_SECRET }}
  ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
  REGISTRAR_USERNAME: ${{ secrets.REGISTRAR_USERNAME }}
  REGISTRAR_PASSWORD: ${{ secrets.REGISTRAR_PASSWORD }}
  EDITOR_USERNAME: ${{ secrets.EDITOR_USERNAME }}
  EDITOR_PASSWORD: ${{ secrets.EDITOR_PASSWORD }}
  ORGADMIN_USERNAME: ${{ secrets.ORGADMIN_USERNAME }}
  ORGADMIN_PASSWORD: ${{ secrets.ORGADMIN_PASSWORD }}
  ORGEDITOR_USERNAME: ${{ secrets.ORGEDITOR_USERNAME }}
  ORGEDITOR_PASSWORD: ${{ secrets.ORGEDITOR_PASSWORD }}

jobs:
  docker_build:
    runs-on: ubuntu-latest
    name: Build Docker Image

    env:
      NODE_ENV: test

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - id: cache-docker
        uses: actions/cache@v2
        with:
          path: /tmp/docker-save
          key: docker-save-${{ hashFiles('Dockerfile', 'package-lock.json') }}

      - if: steps.cache-docker.outputs.cache-hit == 'true'
        name: Load cached Docker image
        run: docker load -i /tmp/docker-save/snapshot.tar || true

      - name: Build
        run: script/ci/cibuild

      - name: Save Docker image
        run: |
          mkdir -p /tmp/docker-save
          docker save app_test:latest -o /tmp/docker-save/snapshot.tar

      - uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: /tmp/docker-save
  unit_tests:
    needs: docker_build
    runs-on: ubuntu-latest
    name: Unit Tests

    env:
      NODE_ENV: test

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download Docker Image
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: /tmp/docker-save

      - name: Load Docker Image
        run: |
          cd /tmp/docker-save
          docker load < snapshot.tar
      - name: Test
        id: test
        run: script/ci/unit-test
  e2e_setup:
    runs-on: ubuntu-latest
    outputs:
      # will contain a json string with an array of n elements, each being a string of spec files delimited by ,
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      # json string with ids to use in the next job matrix depending on how many elements are in the above array, eg: [0,1]
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
    steps:
      - uses: actions/checkout@v2
      - id: set-test-chunks
        name: Set Chunks
        # get all spec files from the integration directory, group them to be at most 15 at a time and transform them to json
        run: echo "::set-output name=test-chunks::$(find cypress/integration -type f -name "*.spec.ts" | xargs -n15 | tr ' ' ',' | jq -R . | jq -s -cM .)"
      - id: set-test-chunk-ids
        name: Set Chunk IDs
        # get the number of elements from the above array as an array of indexes
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
  e2e_tests:
    needs:
      - docker_build
      - e2e_setup
    runs-on: ubuntu-latest
    name: E2E test (chunk ${{ matrix.chunk }})
    strategy:
      matrix:
        # will be for eg chunk: [0,1]
        chunk: ${{ fromJson(needs.setup.outputs['test-chunk-ids']) }}

    env:
      NODE_ENV: test

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download Docker Image
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: /tmp/docker-save

      - name: Load Docker Image
        run: |
          cd /tmp/docker-save
          docker load < snapshot.tar

      - name: Test
        id: test
        run: SPECS=$(echo $CHUNKS | jq -cMr '.[${{ matrix.chunk }}] | @text') && script/ci/e2e

      - name: Upload end-to-end-test screenshots
        if: failure() && steps.Test.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: end-to-end-test-screenshots
          path: cypress/screenshots/
          retention-days: 14

      - name: Upload end-to-end-test videos
        if: failure() && steps.Test.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: end-to-end-test-videos
          path: cypress/videos/
          retention-days: 14
